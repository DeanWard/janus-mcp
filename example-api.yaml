openapi: 3.0.3
info:
  title: Pet Store API
  description: A simple pet store API for testing the OpenAPI MCP server
  version: 1.0.0
  contact:
    name: API Support
    email: support@petstore.com
servers:
  - url: https://api.petstore.com/v1
    description: Production server
paths:
  /pets:
    get:
      summary: List all pets
      description: Retrieve a list of all pets in the store
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: Maximum number of pets to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: tag
          in: query
          description: Filter pets by tag
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
              example:
                - id: 1
                  name: "Fluffy"
                  tag: "cat"
                - id: 2
                  name: "Buddy"
                  tag: "dog"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new pet
      description: Add a new pet to the store
      tags:
        - pets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
            example:
              name: "Max"
              tag: "dog"
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{id}:
    get:
      summary: Get a pet by ID
      description: Retrieve a specific pet by its ID
      tags:
        - pets
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the pet to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Pet details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a pet
      description: Update an existing pet
      tags:
        - pets
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the pet to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '200':
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a pet
      description: Remove a pet from the store
      tags:
        - pets
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the pet to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Pet deleted successfully
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      summary: List users
      description: Get a list of all users
      tags:
        - users
      security:
        - apiKey: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      summary: User login
      description: Authenticate a user and return a token
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  description: User's password
              required:
                - email
                - password
            example:
              email: "user@example.com"
              password: "secretpassword"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT authentication token
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the pet
          example: 1
        name:
          type: string
          description: The name of the pet
          example: "Fluffy"
        tag:
          type: string
          description: Category tag for the pet
          example: "cat"
        status:
          type: string
          enum: [available, pending, sold]
          description: Pet status in the store
          example: "available"
    NewPet:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the pet
          example: "Buddy"
        tag:
          type: string
          description: Category tag for the pet
          example: "dog"
        status:
          type: string
          enum: [available, pending, sold]
          description: Pet status in the store
          default: "available"
    User:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
        email:
          type: string
          format: email
          description: User's email address
        name:
          type: string
          description: User's full name
        role:
          type: string
          enum: [admin, user]
          description: User's role
          default: "user"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: string
          description: Additional error details
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication
